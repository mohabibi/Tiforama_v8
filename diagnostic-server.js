const mysql = require('mysql2/promise');
require('dotenv').config();

async function diagnosticServeur() {
  console.log('üîç DIAGNOSTIC COMPLET DU SERVEUR API TIFORAMA');
  console.log('=' * 50);
  
  // 1. V√©rification des variables d'environnement
  console.log('\nüìã 1. VARIABLES D\'ENVIRONNEMENT:');
  console.log(`DB_HOST: ${process.env.DB_HOST || 'NON D√âFINI'}`);
  console.log(`DB_USER: ${process.env.DB_USER || 'NON D√âFINI'}`);
  console.log(`DB_NAME: ${process.env.DB_NAME || 'NON D√âFINI'}`);
  console.log(`DB_PORT: ${process.env.DB_PORT || 'NON D√âFINI'}`);
  console.log(`PASSWORD d√©fini: ${process.env.DB_PASSWORD ? 'OUI' : 'NON'}`);
  
  // 2. Test de connexion MySQL
  console.log('\nüîå 2. TEST DE CONNEXION MYSQL:');
  
  const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'fragDb',
    port: process.env.DB_PORT || 3306,
    connectTimeout: 10000,
  };
  
  console.log(`Tentative de connexion √†: ${dbConfig.user}@${dbConfig.host}:${dbConfig.port}/${dbConfig.database}`);
  
  try {
    const connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Connexion MySQL r√©ussie !');
    
    // Test des tables
    try {
      const [tables] = await connection.execute(`SHOW TABLES FROM ${dbConfig.database}`);
      console.log(`üìä Tables trouv√©es dans ${dbConfig.database}:`);
      tables.forEach(table => {
        console.log(`   - ${Object.values(table)[0]}`);
      });
      
      // Test sp√©cifique de la table groups
      try {
        const [groups] = await connection.execute(`SELECT COUNT(*) as count FROM groups`);
        console.log(`üë• Nombre de groupes: ${groups[0].count}`);
        
        const [groupList] = await connection.execute(`SELECT id, name FROM groups LIMIT 5`);
        console.log('üìã Premiers groupes:');
        groupList.forEach(group => {
          console.log(`   #${group.id} - ${group.name}`);
        });
        
      } catch (error) {
        console.log('‚ùå Erreur lors de la lecture de la table groups:', error.message);
      }
      
    } catch (error) {
      console.log('‚ùå Erreur lors de l\'exploration des tables:', error.message);
    }
    
    await connection.end();
    
  } catch (error) {
    console.log('‚ùå Erreur de connexion MySQL:', error.message);
    console.log('Code d\'erreur:', error.code);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° Le serveur MySQL refuse la connexion');
      console.log('   ‚Üí V√©rifiez que MySQL est d√©marr√©');
      console.log('   ‚Üí V√©rifiez les param√®tres de firewall');
    } else if (error.code === 'ETIMEDOUT') {
      console.log('üí° Timeout de connexion');
      console.log('   ‚Üí Le serveur MySQL n\'est pas accessible');
      console.log('   ‚Üí V√©rifiez l\'IP et le port');
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('üí° Acc√®s refus√©');
      console.log('   ‚Üí V√©rifiez les identifiants MySQL');
    }
  }
  
  // 3. Test des d√©pendances Node.js
  console.log('\nüì¶ 3. D√âPENDANCES NODE.JS:');
  try {
    const express = require('express');
    console.log('‚úÖ Express disponible');
  } catch (error) {
    console.log('‚ùå Express manquant - npm install express');
  }
  
  try {
    const cors = require('cors');
    console.log('‚úÖ CORS disponible');
  } catch (error) {
    console.log('‚ùå CORS manquant - npm install cors');
  }
  
  try {
    require('dotenv');
    console.log('‚úÖ dotenv disponible');
  } catch (error) {
    console.log('‚ùå dotenv manquant - npm install dotenv');
  }
  
  // 4. Recommandations
  console.log('\nüí° 4. RECOMMANDATIONS:');
  
  if (!process.env.DB_HOST) {
    console.log('‚ö†Ô∏è Cr√©ez un fichier .env avec vos param√®tres de base de donn√©es');
  }
  
  console.log('üöÄ Pour r√©soudre l\'erreur 500:');
  console.log('   1. V√©rifiez que MySQL est accessible depuis votre machine');
  console.log('   2. Configurez MySQL pour accepter les connexions externes');
  console.log('   3. V√©rifiez les param√®tres firewall du VPS');
  console.log('   4. Testez la connexion avec: node test-hostinger.js');
  
  console.log('\n‚úÖ Diagnostic termin√©!');
}

diagnosticServeur().catch(console.error);
